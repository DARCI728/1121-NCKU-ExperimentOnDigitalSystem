`define TimeExpire 32'd50000000

module TopModule(
    input wire reset,
    input wire clock,
    output wire div_clock,
    output wire [3:0] count,
    output wire [6:0] out,
    input wire up_down
);

    FrequencyDivider u_frequency_divider(
        .reset(reset),
        .clock(clock),
        .div_clock(duv_clock)
    );

    UpDownCounter u_up_down_counter(
        .reset(reset),
        .div_clock(div_clock),
        .up_down(up_down),
        .count(count)
    );

    SevenDisplay u_seven_display(
        .count(count),
        .out(out)
    );

endmodule


module UpDownCounter(reset, div_clock, up_down, count);
	input wire reset;
	input wire div_clock;
	input up_down;
	output wire [3:0] count;
	
	reg [3:0] counter;

    always @(posedge div_clock) begin
        if (!reset) begin
            counter <= 4'b0000;
        end else begin
            if (up_down) begin
                counter <= counter + 1;
            end else begin
                counter <= counter - 1;
            end
        end
    end 

    assign count = counter;
	 
	end 

endmodule 

module FrequencyDivider(reset, clock, div_clock);
	input wire reset;
	input wire clock;
	output wire div_clock;
	
	reg [23:0] count;

   always @(posedge clock) begin
		if (!reset) begin
			count <= 32'd0;
			div_clock <= 1'b0;
      end else begin
         if (count == `TimeExpire) begin 
				count <= 32'd0;
				div_colck <= ~div_clock;
			end else begin
				count <= count + 1;
      end
   end
	
endmodule 

module SevenDisplay(count, out);
	input wire [3:0] count;
	output reg [6:0] out;
	
	always @(*) begin
		case (count)
			4'b0000: out = 7'b0111111;
			4'b0001: out = 7'b1111001;
			4'b0010: out = 7'b0100100;
			4'b0011: out = 7'b0110000;
			4'b0100: out = 7'b0011001;
			4'b0101: out = 7'b0010010;
			4'b0110: out = 7'b0000010;
			4'b0111: out = 7'b1111000;
			4'b1000: out = 7'b0000000;
			4'b1001: out = 7'b0010000;
			4'b1010: out = 7'b0001000;
			4'b1011: out = 7'b0000011;
			4'b1100: out = 7'b1000110;
			4'b1101: out = 7'b0100001;
			4'b1110: out = 7'b0000110;
			4'b1111: out = 7'b0001110;
			default: out = 7'b0111111;
		endcase 
	end 

endmodule 